
name: 部署文档 # 定义工作流的名称，便于识别和管理。

on:
  push:
    branches:
      - main  # 确保这是你正在使用的分支名称, 每当 push 到 main 分支时触发部署

permissions:
  contents: write # 授予工作流对仓库内容的写入权限，以便能够推送构建后的文档到目标分支

jobs:
  deploy-gh-pages:
    runs-on: ubuntu-latest # 定义一个名为 deploy-gh-pages 的任务，运行在最新的 Ubuntu 环境中
    steps:
      # 检出代码到工作区。fetch-depth: 0 确保获取完整的 Git 历史记录，便于后续操作（如生成变更日志）
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # 如果你文档需要 Git 子模块，取消注释下一行
          # submodules: true

          #安装指定版本的 pnpm（此处为 8），并运行 pnpm install 安装依赖。
      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: true
          version: 8

     # 设置 Node.js 环境为 20 版本，并启用 pnpm 缓存以加速依赖安装
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm

      - name: 构建文档
        env:
          NODE_OPTIONS: --max_old_space_size=8192 #设置 Node.js 内存限制为 8GB，防止构建过程中内存不足。
          #创建 .nojekyll 文件，避免 GitHub Pages 将 _ 开头的文件夹视为 Jekyll 配置
        run: |-
          pnpm run build
          > .vuepress/dist/.nojekyll

      - name: 部署文档
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: my-blog # 这是文档部署到的分支名称
          folder: .vuepress/dist #指定部署的文件夹为 .vuepress/dist
