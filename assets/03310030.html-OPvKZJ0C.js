import{_ as s,c as n,e as l,o as e}from"./app-C-L3CEF_.js";const t={};function i(r,a){return e(),n("div",null,a[0]||(a[0]=[l(`<h1 id="协议" tabindex="-1"><a class="header-anchor" href="#协议"><span>协议</span></a></h1><h2 id="http协议" tabindex="-1"><a class="header-anchor" href="#http协议"><span>HTTP协议</span></a></h2><h3 id="get和post的区别" tabindex="-1"><a class="header-anchor" href="#get和post的区别"><span>get和post的区别</span></a></h3><ul><li>get请求：</li><li>get请求是向服务器发送请求，请求参数是拼接在url后面，所以get请求的参数长度是有限制的，而且参数是明文可见的，不安全。</li><li>post请求：</li><li>post请求是向服务器发送请求，请求参数是放在请求体中，所以post请求的参数长度是无限制的，而且参数是隐藏的，安全。</li></ul><h3 id="post和put的区别" tabindex="-1"><a class="header-anchor" href="#post和put的区别"><span>post和put的区别</span></a></h3><ul><li>put请求：</li><li>不会增加数据种类，而是更新数据</li><li>post请求：</li><li>增加数据种类，创建新内容</li></ul><h3 id="常见的http请求头" tabindex="-1"><a class="header-anchor" href="#常见的http请求头"><span>常见的http请求头</span></a></h3><h3 id="常见的http响应头" tabindex="-1"><a class="header-anchor" href="#常见的http响应头"><span>常见的http响应头</span></a></h3><ul><li>Content-Type：响应体的类型</li></ul><h3 id="content-type的四种类型" tabindex="-1"><a class="header-anchor" href="#content-type的四种类型"><span>Content-Type的四种类型</span></a></h3><ul><li>text/html：html格式的文本</li><li>application/json：json格式的文本</li><li>application/x-www-form-urlencoded：form格式的文本，浏览器的原生form表单</li><li>multipart/form-data：form格式的文本，post请求的form表单</li></ul><h3 id="http状态码304多好还是少一点好" tabindex="-1"><a class="header-anchor" href="#http状态码304多好还是少一点好"><span>http状态码304多好还是少一点好</span></a></h3><ul><li>304：缓存有效，直接返回缓存内容，不需要重新请求服务器</li><li>304过多，会造成以下问题 <ul><li>网站收录减少</li><li>权重下降</li><li>网站快照停止</li></ul></li></ul><h3 id="常见的http的请求方法" tabindex="-1"><a class="header-anchor" href="#常见的http的请求方法"><span>常见的http的请求方法</span></a></h3><ul><li>GET：获取资源</li><li>POST：创建资源,将实体提交到指定的资源，通常会造成服务器资源的更改</li><li>PUT：更新资源</li><li>DELETE：删除资源</li><li>HEAD：获取报文首部，与get相比，不反回主体报文</li><li>OPTIONS：获取资源支持的请求方法，可以用来跨域请求</li><li>CONNECT：用于建立到代理服务器的隧道，进行代理服务器到服务器的连接</li><li>TRACE：用于回环测试，回环测试是服务器端对客户端的请求进行跟踪，通常用于测试服务器是否能正常响应请求</li></ul><h3 id="options请求方法与使用场景" tabindex="-1"><a class="header-anchor" href="#options请求方法与使用场景"><span>OPTIONS请求方法与使用场景</span></a></h3><ul><li>OPTIONS方法适用于请求获得由REQUESt-URL标识的资源在请求/响应的通信过程中可以使用的功能选项，通过这个方法，客户端可以在采取具体资源请求之前，决定对资源采取哪一种必要措施，或者了解服务器的性能。该请求方法的响应不能缓存。</li><li>适用场景：主要有两个 <ul><li>获取服务器支持的所有HTTP请求方法</li><li>用来检查访问权限，例如，在CORS跨域资源共享时，对于复杂请求，就是使用OPTIONAS发送嗅申请，以判断是否有对指定资源的访问权限</li></ul></li></ul><h3 id="http和https的区别" tabindex="-1"><a class="header-anchor" href="#http和https的区别"><span>http和https的区别</span></a></h3><ul><li>HTTPS协议需要CA证书，费用较高；而HTTP协议不需要CA证书，免费。</li><li>HTTP协议时超文本传输协议，信息时明文传输的。HPPTS则是超文本传输安全协议，信息是加密传输的。</li><li>使用不同的连接方式，端口不同，80端口是http协议，443端口是https协议。</li><li>HTTP协议连接很简单，是无状态的，而HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP协议安全。</li></ul><h3 id="get请求方法url长度限制的原因" tabindex="-1"><a class="header-anchor" href="#get请求方法url长度限制的原因"><span>get请求方法URL长度限制的原因</span></a></h3><p>GET 请求的 URL 长度限制主要由以下几个因素决定：</p><hr><h4 id="_1-浏览器的限制" tabindex="-1"><a class="header-anchor" href="#_1-浏览器的限制"><span>1. <strong>浏览器的限制</strong></span></a></h4><ul><li><strong>不同浏览器对 URL 长度有不同的限制</strong>： <ul><li><strong>Internet Explorer (IE)</strong>：最大 URL 长度为 2,083 个字符。</li><li><strong>Google Chrome</strong>：理论上支持非常长的 URL（约 2,000,000 个字符），但实际使用中受服务器或其他网络组件的限制。</li><li><strong>Firefox</strong>：支持的 URL 长度约为 65,536 个字符。</li><li><strong>Safari</strong>：支持的 URL 长度与 Chrome 类似，但同样受限于其他因素。</li></ul></li></ul><hr><h4 id="_2-服务器的限制" tabindex="-1"><a class="header-anchor" href="#_2-服务器的限制"><span>2. <strong>服务器的限制</strong></span></a></h4><ul><li><strong>Web 服务器对 URL 的解析能力有限</strong>： <ul><li><strong>Apache</strong>：默认支持的 URL 长度为 8,192 个字符，可以通过配置调整。</li><li><strong>Nginx</strong>：默认支持的 URL 长度为 4,000 个字符，也可以通过 <code>large_client_header_buffers</code> 参数调整。</li><li><strong>IIS（Internet Information Services）</strong>：默认支持的 URL 长度为 16,384 个字符，可以通过 <code>maxUrlLength</code> 和 <code>maxQueryString</code> 配置项调整。</li></ul></li></ul><hr><h4 id="_3-协议的限制" tabindex="-1"><a class="header-anchor" href="#_3-协议的限制"><span>3. <strong>协议的限制</strong></span></a></h4><ul><li><strong>HTTP 协议本身没有明确限制 URL 的长度</strong>，但实际实现中会受到以下约束： <ul><li><strong>TCP/IP 数据包大小</strong>：HTTP 请求最终通过 TCP/IP 协议传输，单个数据包的最大大小通常为 65,535 字节（IPv4）。如果 URL 过长，可能需要分片传输，增加复杂性和潜在错误。</li><li><strong>代理服务器和负载均衡器</strong>：这些中间件可能会对 URL 长度施加额外限制。</li></ul></li></ul><hr><h4 id="_4-安全性考虑" tabindex="-1"><a class="header-anchor" href="#_4-安全性考虑"><span>4. <strong>安全性考虑</strong></span></a></h4><ul><li><strong>过长的 URL 可能引发安全问题</strong>： <ul><li>恶意用户可能利用超长 URL 导致服务器资源耗尽（如 DOS 攻击）。</li><li>URL 中包含敏感信息（如密码或令牌）时，过长的 URL 增加了泄露风险。</li></ul></li></ul><hr><h4 id="_5-缓存和书签的限制" tabindex="-1"><a class="header-anchor" href="#_5-缓存和书签的限制"><span>5. <strong>缓存和书签的限制</strong></span></a></h4><ul><li><strong>浏览器缓存和书签功能</strong>： <ul><li>如果 URL 过长，可能导致缓存或书签存储失败。</li><li>某些浏览器或设备对书签的长度有硬性限制。</li></ul></li></ul><hr><h4 id="_6-推荐的最佳实践" tabindex="-1"><a class="header-anchor" href="#_6-推荐的最佳实践"><span>6. <strong>推荐的最佳实践</strong></span></a></h4><ul><li><strong>RFC 3986</strong>（URI 标准）虽然没有明确规定 URL 的最大长度，但建议开发者将 GET 请求的 URL 长度控制在 <strong>2,000 个字符以内</strong>，以兼容大多数浏览器和服务器。</li></ul><hr><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><p>GET 请求的 URL 长度限制是由 <strong>浏览器、服务器、协议、安全性</strong> 等多方面因素共同决定的。为了避免兼容性问题，建议在设计 API 或 Web 应用时，尽量避免传递过长的参数。如果需要传递大量数据，可以考虑使用 POST 请求，将数据放在请求体中而非 URL 中。</p><h3 id="当在浏览器中输入-google-com-并且按下回车键之后发生了什么" tabindex="-1"><a class="header-anchor" href="#当在浏览器中输入-google-com-并且按下回车键之后发生了什么"><span>当在浏览器中输入 Google.com 并且按下回车键之后发生了什么？</span></a></h3><p>当用户在浏览器地址栏中输入 <code>Google.com</code> 并按下回车键后，会触发一系列复杂的操作。以下是详细的过程分解：</p><hr><h4 id="_1-dns-解析" tabindex="-1"><a class="header-anchor" href="#_1-dns-解析"><span>1. <strong>DNS 解析</strong></span></a></h4><ul><li>浏览器首先检查是否缓存了 <code>Google.com</code> 的 IP 地址。</li><li>如果没有缓存，浏览器会向本地 DNS 服务器发起请求，将域名 <code>Google.com</code> 转换为对应的 IP 地址。</li><li>DNS 查询可能涉及多个层级的 DNS 服务器（如根服务器、顶级域名服务器和权威域名服务器）。</li></ul><hr><h4 id="_2-建立-tcp-连接" tabindex="-1"><a class="header-anchor" href="#_2-建立-tcp-连接"><span>2. <strong>建立 TCP 连接</strong></span></a></h4><ul><li>浏览器通过解析得到的 IP 地址与目标服务器建立 TCP 连接。</li><li>如果使用 HTTPS 协议，还会进行以下步骤： <ul><li><strong>TLS 握手</strong>：浏览器与服务器协商加密算法，并验证服务器证书的有效性。</li><li><strong>密钥交换</strong>：双方生成共享密钥，用于后续通信的加密和解密。</li></ul></li></ul><hr><h4 id="_3-发送-http-请求" tabindex="-1"><a class="header-anchor" href="#_3-发送-http-请求"><span>3. <strong>发送 HTTP 请求</strong></span></a></h4><ul><li>浏览器向服务器发送一个 HTTP 或 HTTPS 请求，通常是一个 GET 请求，例如：<div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">google.com</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 ...</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,...</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>请求头中包含浏览器信息、支持的 MIME 类型、语言偏好等。</li></ul><hr><h4 id="_4-服务器处理请求" tabindex="-1"><a class="header-anchor" href="#_4-服务器处理请求"><span>4. <strong>服务器处理请求</strong></span></a></h4><ul><li>目标服务器接收请求并解析 URL 和请求头。</li><li>根据请求的内容，服务器执行相应的逻辑（如查询数据库、渲染页面等）。</li><li>服务器生成响应内容，通常是 HTML 页面，也可能包括 CSS、JavaScript 和图片等资源。</li></ul><hr><h4 id="_5-返回-http-响应" tabindex="-1"><a class="header-anchor" href="#_5-返回-http-响应"><span>5. <strong>返回 HTTP 响应</strong></span></a></h4><ul><li>服务器将响应内容发送回浏览器，响应格式如下：<div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-8</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">12345</span></span></span>
<span class="line">...</span>
<span class="line"></span>
<span class="line">&lt;!DOCTYPE html&gt;</span>
<span class="line">&lt;html&gt;...&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="_6-浏览器解析和渲染" tabindex="-1"><a class="header-anchor" href="#_6-浏览器解析和渲染"><span>6. <strong>浏览器解析和渲染</strong></span></a></h4><ul><li>浏览器接收到响应后，开始解析 HTML 内容。</li><li><strong>构建 DOM 树</strong>：根据 HTML 结构生成 DOM 树。</li><li><strong>解析 CSS</strong>：下载并解析外部样式表，生成 CSSOM 树。</li><li><strong>布局计算</strong>：结合 DOM 树和 CSSOM 树，计算每个元素的位置和尺寸。</li><li><strong>绘制页面</strong>：将布局结果转换为屏幕上的像素。</li><li><strong>合成页面</strong>：如果有动画或图层效果，浏览器会进一步优化渲染。</li></ul><hr><h4 id="_7-加载额外资源" tabindex="-1"><a class="header-anchor" href="#_7-加载额外资源"><span>7. <strong>加载额外资源</strong></span></a></h4><ul><li>浏览器解析 HTML 时，可能会发现需要加载的额外资源（如 JavaScript 文件、图片、字体等）。</li><li>浏览器会发起新的 HTTP 请求以加载这些资源，并将其插入到页面中。</li></ul><hr><h4 id="_8-执行-javascript" tabindex="-1"><a class="header-anchor" href="#_8-执行-javascript"><span>8. <strong>执行 JavaScript</strong></span></a></h4><ul><li>如果页面包含 JavaScript 代码，浏览器会在适当的时间点执行这些脚本。</li><li>JavaScript 可能会动态修改 DOM 或发起额外的网络请求（如 AJAX 请求）。</li></ul><hr><h4 id="_9-呈现最终页面" tabindex="-1"><a class="header-anchor" href="#_9-呈现最终页面"><span>9. <strong>呈现最终页面</strong></span></a></h4><ul><li>当所有资源加载完成，页面呈现完毕。</li><li>用户可以看到完整的 Google 搜索页面。</li></ul><hr><h4 id="_10-缓存和性能优化" tabindex="-1"><a class="header-anchor" href="#_10-缓存和性能优化"><span>10. <strong>缓存和性能优化</strong></span></a></h4><ul><li>浏览器会将部分资源（如图片、CSS、JavaScript 文件）缓存到本地，以便下次访问时更快加载。</li><li>如果用户再次访问 <code>Google.com</code>，浏览器可能会直接从缓存中读取资源，减少网络请求。</li></ul><hr><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h4><p>从输入 <code>Google.com</code> 到看到页面，整个过程涉及 <strong>DNS 解析、TCP 连接建立、HTTP 请求与响应、浏览器渲染</strong> 等多个阶段。每个阶段都可能受到网络条件、服务器性能和浏览器实现的影响。</p>`,77)]))}const p=s(t,[["render",i]]),h=JSON.parse('{"path":"/blogs/ajax/2025/03310030.html","title":"HTTP协议","lang":"en-US","frontmatter":{"title":"HTTP协议","date":"2025-03-29T00:00:00.000Z","tags":["ajax"],"categories":["Server"]},"headers":[{"level":2,"title":"HTTP协议","slug":"http协议","link":"#http协议","children":[{"level":3,"title":"get和post的区别","slug":"get和post的区别","link":"#get和post的区别","children":[]},{"level":3,"title":"post和put的区别","slug":"post和put的区别","link":"#post和put的区别","children":[]},{"level":3,"title":"常见的http请求头","slug":"常见的http请求头","link":"#常见的http请求头","children":[]},{"level":3,"title":"常见的http响应头","slug":"常见的http响应头","link":"#常见的http响应头","children":[]},{"level":3,"title":"Content-Type的四种类型","slug":"content-type的四种类型","link":"#content-type的四种类型","children":[]},{"level":3,"title":"http状态码304多好还是少一点好","slug":"http状态码304多好还是少一点好","link":"#http状态码304多好还是少一点好","children":[]},{"level":3,"title":"常见的http的请求方法","slug":"常见的http的请求方法","link":"#常见的http的请求方法","children":[]},{"level":3,"title":"OPTIONS请求方法与使用场景","slug":"options请求方法与使用场景","link":"#options请求方法与使用场景","children":[]},{"level":3,"title":"http和https的区别","slug":"http和https的区别","link":"#http和https的区别","children":[]},{"level":3,"title":"get请求方法URL长度限制的原因","slug":"get请求方法url长度限制的原因","link":"#get请求方法url长度限制的原因","children":[]},{"level":3,"title":"当在浏览器中输入 Google.com 并且按下回车键之后发生了什么？","slug":"当在浏览器中输入-google-com-并且按下回车键之后发生了什么","link":"#当在浏览器中输入-google-com-并且按下回车键之后发生了什么","children":[]}]}],"git":{"createdTime":1743354643000,"updatedTime":1743354643000,"contributors":[{"name":"creatliukun","email":"952476356@qq.com","commits":1}]},"filePathRelative":"blogs/ajax/2025/03310030.md"}');export{p as comp,h as data};
