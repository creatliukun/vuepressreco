import{_ as s,c as a,e as p,o as t}from"./app-BfD-I2tW.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="网页读取文件" tabindex="-1"><a class="header-anchor" href="#网页读取文件"><span>网页读取文件</span></a></h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>现在vscode网页版，可以读取文件了，结合这个效果，自己实现一下。看看效果</p><h2 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路"><span>实现思路</span></a></h2><h3 id="_1-如何弹出文件夹选择框" tabindex="-1"><a class="header-anchor" href="#_1-如何弹出文件夹选择框"><span>1，如何弹出文件夹选择框</span></a></h3><p>通过js的api，showDirectoryPicker, 弹出文件夹选择框，获取选择的文件夹路径</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 弹出文件夹选择框 io操作，是异步返回的是一个promise</span></span>
<span class="line"><span class="token comment">// 句柄</span></span>
<span class="line"><span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showDirectoryPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-如何获取文件夹的内容" tabindex="-1"><a class="header-anchor" href="#_2-如何获取文件夹的内容"><span>2，如何获取文件夹的内容</span></a></h3><p>通过handle.entries()或者handle.values()，获取文件夹下的所有文件，然后遍历，获取文件内容</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 处理句柄</span></span>
<span class="line">   <span class="token keyword">await</span> <span class="token function">processHandle</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> fileHandle <span class="token operator">=</span> <span class="token keyword">await</span> handle<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 获取第一个尝试一下</span></span>
<span class="line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processHandle</span><span class="token punctuation">(</span><span class="token parameter">handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>handle<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 异步迭代器</span></span>
<span class="line">    handle<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 生成树状结构</span></span>
<span class="line">      handle<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 递归调用</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">processHandle</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-如额读取文件夹的内容" tabindex="-1"><a class="header-anchor" href="#_3-如额读取文件夹的内容"><span>3，如额读取文件夹的内容</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> fileHandle<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">//  生成文件对象</span></span>
<span class="line">  <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// 加载完成后触发</span></span>
<span class="line">  reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">,</span> <span class="token string">&#39;读取的文件内容&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 读取文件内容</span></span>
<span class="line">  reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-如何实现代码着色" tabindex="-1"><a class="header-anchor" href="#_4-如何实现代码着色"><span>4，如何实现代码着色</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">可以通过插件 highlight<span class="token punctuation">.</span>js 这个插件来处理</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-完整代码" tabindex="-1"><a class="header-anchor" href="#_5-完整代码"><span>5，完整代码</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>选择文件夹<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">      <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// alert(&#39;Button clicked!&#39;)</span></span>
<span class="line">        <span class="token comment">// 弹出文件夹选择框 io操作，是异步返回的是一个promise</span></span>
<span class="line">        <span class="token comment">// 句柄</span></span>
<span class="line">        <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showDirectoryPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// console.log(handle)</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">processHandle</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">&#39;1213&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// const fileHandle = await handle.getFile()</span></span>
<span class="line">        <span class="token keyword">const</span> fileHandle <span class="token operator">=</span> <span class="token keyword">await</span> handle<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 默认获取第一个文件，尝试打印</span></span>
<span class="line">        <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> fileHandle<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//  生成文件对象</span></span>
<span class="line">        <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 加载完成后触发</span></span>
<span class="line">        reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">,</span> <span class="token string">&#39;读取的文件内容&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 读取文件内容</span></span>
<span class="line">        reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 处理句柄</span></span>
<span class="line">      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processHandle</span><span class="token punctuation">(</span><span class="token parameter">handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>handle<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 异步迭代器</span></span>
<span class="line">        <span class="token comment">// const entries = await handle.entries()</span></span>
<span class="line">        handle<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> <span class="token string">&#39;values&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Directory:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">          <span class="token comment">// 生成树状结构</span></span>
<span class="line">          handle<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span></span>
<span class="line">          <span class="token comment">// 递归调用</span></span>
<span class="line">          <span class="token keyword">await</span> <span class="token function">processHandle</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const i=s(e,[["render",l]]),u=JSON.parse('{"path":"/blogs/category/2025/04082342.html","title":"网页读取文件","lang":"en-US","frontmatter":{"title":"网页读取文件","date":"2025-04-08T00:00:00.000Z","tags":["note"],"categories":["category"]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[{"level":3,"title":"1，如何弹出文件夹选择框","slug":"_1-如何弹出文件夹选择框","link":"#_1-如何弹出文件夹选择框","children":[]},{"level":3,"title":"2，如何获取文件夹的内容","slug":"_2-如何获取文件夹的内容","link":"#_2-如何获取文件夹的内容","children":[]},{"level":3,"title":"3，如额读取文件夹的内容","slug":"_3-如额读取文件夹的内容","link":"#_3-如额读取文件夹的内容","children":[]},{"level":3,"title":"4，如何实现代码着色","slug":"_4-如何实现代码着色","link":"#_4-如何实现代码着色","children":[]},{"level":3,"title":"5，完整代码","slug":"_5-完整代码","link":"#_5-完整代码","children":[]}]}],"git":{"createdTime":1744130468000,"updatedTime":1744130468000,"contributors":[{"name":"creatliukun","email":"952476356@qq.com","commits":1}]},"filePathRelative":"blogs/category/2025/04082342.md"}');export{i as comp,u as data};
