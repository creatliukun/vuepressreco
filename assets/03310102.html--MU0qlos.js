import{_ as s,c as a,e as t,o as p}from"./app-BO1sWL2m.js";const e={};function l(o,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="首屏优化" tabindex="-1"><a class="header-anchor" href="#首屏优化"><span>首屏优化</span></a></h1><p>首屏优化是提升网页性能和用户体验的重要手段。通过减少加载时间、优化资源使用，可以让用户更快地看到页面内容。以下是几种常见的首屏优化方法：</p><h2 id="减少请求" tabindex="-1"><a class="header-anchor" href="#减少请求"><span>减少请求</span></a></h2><p>HTTP 请求是影响页面加载速度的主要因素之一。减少请求数量可以显著提高页面的加载速度。</p><ul><li><strong>合并文件</strong>：将多个 CSS 或 JavaScript 文件合并为一个文件，减少 HTTP 请求数量。</li><li><strong>使用 CDN</strong>：通过内容分发网络（CDN）缓存静态资源，减少服务器压力并加快资源加载速度。</li><li><strong>移除不必要的依赖</strong>：检查项目中是否有未使用的库或模块，删除这些冗余代码以减少请求。</li></ul><h2 id="图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片懒加载"><span>图片懒加载</span></a></h2><p>图片懒加载是一种优化技术，根据图片是否显示到屏幕可视区域，延迟加载图片。这种方法可以减少初始页面加载时的资源消耗，从而提升首屏加载速度。</p><ol><li><p><strong>使用原生 <code>loading=&quot;lazy&quot;</code> 属性</strong>：</p><ul><li>现代浏览器支持 <code>&lt;img&gt;</code> 标签的 <code>loading=&quot;lazy&quot;</code> 属性，可以自动实现懒加载。</li><li>示例：<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Lazy loaded image<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>通过 JavaScript 实现懒加载</strong>：</p><ul><li>使用 Intersection Observer API 检测图片是否进入视口，并在进入视口后再加载图片。</li><li>示例：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> images <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;img.lazy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> img <span class="token operator">=</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">;</span></span>
<span class="line">      img<span class="token punctuation">.</span>src <span class="token operator">=</span> img<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">;</span> <span class="token comment">// 替换为实际图片路径</span></span>
<span class="line">      observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止观察</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">images<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>使用第三方库</strong>：</p><ul><li>如果不想手动实现懒加载逻辑，可以使用成熟的第三方库，如 <code>lazysizes</code> 或 <code>lozad.js</code>。</li></ul></li></ol><h2 id="删除多余代码" tabindex="-1"><a class="header-anchor" href="#删除多余代码"><span>删除多余代码</span></a></h2><p>删除项目中的多余代码可以减少文件大小，从而加快页面加载速度。</p><ul><li><p><strong>清理无用的 CSS 和 JavaScript</strong>：</p><ul><li>使用工具（如 PurgeCSS）删除未使用的样式。</li><li>检查 JavaScript 文件中是否有未调用的函数或变量，删除这些冗余代码。</li></ul></li><li><p><strong>压缩代码</strong>：</p><ul><li>使用工具（如 UglifyJS 或 Terser）压缩 JavaScript 文件。</li><li>使用工具（如 Clean-CSS）压缩 CSS 文件。</li></ul></li></ul><h2 id="组件懒加载" tabindex="-1"><a class="header-anchor" href="#组件懒加载"><span>组件懒加载</span></a></h2><p>组件懒加载是一种按需加载的技术，只有当组件需要渲染时才加载对应的代码。这种方法可以减少初始加载时的资源消耗，特别适用于大型应用。</p><h4 id="vue-中的组件懒加载" tabindex="-1"><a class="header-anchor" href="#vue-中的组件懒加载"><span>Vue 中的组件懒加载</span></a></h4><p>在 Vue 中，可以通过动态导入（<code>import()</code>）实现组件懒加载：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./MyComponent.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token comment">// 然后在路由配置中使用该组件：</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/my-component&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">component</span><span class="token operator">:</span> MyComponent<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="react-中的组件懒加载" tabindex="-1"><a class="header-anchor" href="#react-中的组件懒加载"><span>React 中的组件懒加载</span></a></h4><p>在 React 中，可以使用 React.lazy 和 Suspense 实现组件懒加载：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./MyComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)]))}const i=s(e,[["render",l]]),r=JSON.parse('{"path":"/blogs/brower/2025/03310102.html","title":"首屏优化","lang":"en-US","frontmatter":{"title":"首屏优化","date":"2025-03-31T00:00:00.000Z","tags":["brower"],"categories":["Brower"]},"headers":[{"level":2,"title":"减少请求","slug":"减少请求","link":"#减少请求","children":[]},{"level":2,"title":"图片懒加载","slug":"图片懒加载","link":"#图片懒加载","children":[]},{"level":2,"title":"删除多余代码","slug":"删除多余代码","link":"#删除多余代码","children":[]},{"level":2,"title":"组件懒加载","slug":"组件懒加载","link":"#组件懒加载","children":[]}],"git":{"createdTime":1743354643000,"updatedTime":1743440851000,"contributors":[{"name":"creatliukun","email":"952476356@qq.com","commits":2}]},"filePathRelative":"blogs/brower/2025/03310102.md"}');export{i as comp,r as data};
